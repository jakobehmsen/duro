/*
Collections library
*/

Iterable = { };

Generator = {
	on: function(block) {
		var generator = {
			current: null,
			producer: null,
			mover: null,
			moveNext: function() {
				current = null;
				mover = frame;
				producer.setSender(mover);
				producer.resume(null);
			},
			atEnd: function() {
				return current.isNull();
			},
			put: function(item) {
				current = item;
				producer = frame.sender();
				mover.resume(null);
			},
			next: function() {
				var previous = current;
				moveNext();
				return previous;
			}
		};
		generator.mover = frame;
		block(generator);
		return generator;
	}
};

Generatable = {
	on: function(block) {
		var generatable = Iterable.clone();
		
		generatable.block = block;
		generatable.iterator = function() {
			return Generator.on(block);
		};
		
		return generatable;
	}
};

function arrayLength(array) {
	#{
		load_arg 0;
		sp_array_length;
		ret 1;
	}
}

function newArray(length) {
	#{
		load_arg 0;
		sp_new_array;
		ret 1;
	}
}

Array.prototype ^= Iterable;
Array.set = function(index, value) {
	# {
		load_this;
		load_arg 0;
		load_arg 1;
		sp_array_set;
	}
};
Array.get = function(index) {
	# {
		load_this;
		load_arg 0;
		sp_array_get;
		ret 1;
	}
};
Array.length = function() {
	#{
		load_this;
		sp_array_length;
		ret 1;
	}
};
Array.iterator = function() {
	return Generator.on({
		for(var i = 0; i < length(); i++) {
			var item = this[i];
			:generator.put(item);
		}
	});
};

/*
// Implicit inheritance based on protocol?

Iterable = extend(["iterable"]);

Iterable.where = function(predicate) {
	for(var x in this) {
		if(predicate(x))
			yield x;
	}
}
*/

Iterable.where = function(predicate) {
	return Generatable.on({
		for(var x in this) {
			if(predicate(x))
				:generator.put(x);
		}
	});
};
Iterable.each = function(block) {
	for(var x in this)
		block(x);
};

List = Iterable.clone();
List.items = newArray(12);
List.capacity = 12;
List.size = 0;
List.add = function(item) {
	this.items[this.size] = item;
	this.size++;
};
List.iterator = function() {
	return Generator.on({
		for(var i = 0; i < size; i++) {
			var item = items[i];
			:generator.put(item);
		}
	});
};
List.set = function(index, value) {
	items[index] = value;
};
List.get = function(index) {
	return items[index];
};