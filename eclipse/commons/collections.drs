/*
Collections library
*/

Generator = {
	on: function(block) {
		var generator = {
			current: null,
			producer: null,
			mover: null,
			moveNext: function() {
				current = null;
				mover = frame;
				producer.setSender(mover);
				producer.resume(null);
			},
			atEnd: function() {
				return current.isNull();
			},
			put: function(item) {
				current = item;
				producer = frame.sender();
				mover.resume(null);
			},
			next: function() {
				var previous = current;
				moveNext();
				return previous;
			}
		};
		generator.mover = frame;
		block(generator);
		return generator;
	}
};

function arrayLength(array) {
	#{
		load_arg 0;
		sp_array_length;
		ret 1;
	}
}

function newArray(length) {
	#{
		load_arg 0;
		sp_new_array;
		ret 1;
	}
}

Array.set = function(index, value) {
	# {
		load_this;
		load_arg 0;
		load_arg 1;
		sp_array_set;
	}
};

Array.get = function(index) {
	# {
		load_this;
		load_arg 0;
		sp_array_get;
		ret 1;
	}
};

Array.length = function() {
	#{
		load_this;
		sp_array_length;
		ret 1;
	}
};

Array.iterator2 = function() {
	return {
		array: this,
		i: 0,
		next: function() {
			if(i < array.length()) {
				var item = array[i];
				i++;
				return true, item;
			}
				
			return false, null;
		}
	};
};

Array.iterator = function() {
	return Generator.on({
		for(var i = 0; i < length(); i++) {
			var item = this[i];
			:generator.put(item);
		}
	});
};

/*
// Implicit inheritance based on protocol?

Iterable = extend(["iterator"]);

Iterable.where = function(predicate) {
	for(var x in this) {
		if(predicate(x))
			yield x;
	}
}
*/

Iterable.where = function(predicate) {
	for(var x in this) {
		if(predicate(x))
			yield x;
	}
};

List = Iterable.clone();
List.items = newArray(12);
List.capacity = 12;
List.size = 0;
List.add = function(item) {
	this.items[this.size] = item;
	this.size++;
};
List.iterator = function() {
	return {
		list: this,
		i: 0,
		next: function() {
			if(this.i < this.list.size) {
				var item = this.list.items[this.i];
				this.i++;
				return true, item;
			}
				
			return false, null;
		}
	};
};
List.set = function(index, value) {
	items[index] = value;
};
List.get = function(index) {
	return items[index];
};